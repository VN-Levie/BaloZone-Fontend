{
  "openapi": "3.0.0",
  "info": {
    "title": "BaloZone Backend API",
    "description": "API documentation for BaloZone - An e-commerce platform for backpacks and travel accessories",
    "version": "1.0.0",
    "contact": {
      "name": "BaloZone Team",
      "email": "support@balozone.com"
    }
  },
  "servers": [
    {
      "url": "http://localhost:8000/api",
      "description": "Local development server"
    }
  ],
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "schemas": {
      "Product": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1
          },
          "category_id": {
            "type": "integer",
            "example": 1
          },
          "brand_id": {
            "type": "integer",
            "nullable": true,
            "example": 1
          },
          "name": {
            "type": "string",
            "example": "Backpack Travel Pro"
          },
          "description": {
            "type": "string",
            "nullable": true,
            "example": "High-quality backpack for travel and outdoor activities"
          },
          "price": {
            "type": "number",
            "format": "decimal",
            "example": 299.99
          },
          "quantity": {
            "type": "integer",
            "example": 50
          },
          "image": {
            "type": "string",
            "nullable": true,
            "example": "uploads/products/backpack-travel-pro.jpg"
          },
          "slug": {
            "type": "string",
            "example": "backpack-travel-pro"
          },
          "color": {
            "type": "string",
            "nullable": true,
            "example": "Black"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "example": "2025-06-18T10:30:00.000000Z"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "example": "2025-06-18T10:30:00.000000Z"
          },
          "category": {
            "$ref": "#/components/schemas/Category"
          },
          "brand": {
            "$ref": "#/components/schemas/Brand"
          },
          "comments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Comment"
            }
          }
        },
        "required": ["id", "category_id", "name", "price", "quantity", "slug"]
      },
      "Category": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1
          },
          "name": {
            "type": "string",
            "example": "Travel Backpacks"
          },
          "description": {
            "type": "string",
            "nullable": true,
            "example": "Backpacks designed for travel and outdoor activities"
          },
          "slug": {
            "type": "string",
            "example": "travel-backpacks"
          },
          "image": {
            "type": "string",
            "nullable": true,
            "example": "uploads/categories/travel-backpacks.jpg"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "products_count": {
            "type": "integer",
            "example": 25
          },
          "products": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Product"
            }
          }
        }
      },
      "Brand": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1
          },
          "name": {
            "type": "string",
            "example": "Nike"
          },
          "description": {
            "type": "string",
            "nullable": true,
            "example": "Leading sports and outdoor brand"
          },
          "slug": {
            "type": "string",
            "example": "nike"
          },
          "logo": {
            "type": "string",
            "nullable": true,
            "example": "uploads/brands/nike-logo.png"
          },
          "status": {
            "type": "string",
            "enum": ["active", "inactive"],
            "example": "active"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "products": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Product"
            }
          }
        }
      },
      "Comment": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1
          },
          "product_id": {
            "type": "integer",
            "example": 1
          },
          "user_id": {
            "type": "integer",
            "example": 1
          },
          "comment": {
            "type": "string",
            "example": "Sản phẩm rất tốt, chất lượng vượt mong đợi!"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "user": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "example": 1
              },
              "name": {
                "type": "string",
                "example": "John Doe"
              }
            }
          },
          "product": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "example": 1
              },
              "name": {
                "type": "string",
                "example": "Backpack Travel Pro"
              },
              "slug": {
                "type": "string",
                "example": "backpack-travel-pro"
              },
              "image": {
                "type": "string",
                "nullable": true,
                "example": "uploads/products/backpack-travel-pro.jpg"
              }
            }
          }
        },
        "required": ["id", "product_id", "user_id", "comment"]
      },
      "ProductRequest": {
        "type": "object",
        "properties": {
          "category_id": {
            "type": "integer",
            "example": 1
          },
          "brand_id": {
            "type": "integer",
            "nullable": true,
            "example": 1
          },
          "name": {
            "type": "string",
            "maxLength": 255,
            "example": "Backpack Travel Pro"
          },
          "description": {
            "type": "string",
            "nullable": true,
            "example": "High-quality backpack for travel and outdoor activities"
          },
          "price": {
            "type": "number",
            "minimum": 0,
            "example": 299.99
          },
          "quantity": {
            "type": "integer",
            "minimum": 0,
            "example": 50
          },
          "image": {
            "type": "string",
            "nullable": true,
            "maxLength": 255,
            "example": "uploads/products/backpack-travel-pro.jpg"
          },
          "slug": {
            "type": "string",
            "maxLength": 255,
            "pattern": "^[a-z0-9]+(?:-[a-z0-9]+)*$",
            "example": "backpack-travel-pro"
          },
          "color": {
            "type": "string",
            "nullable": true,
            "maxLength": 100,
            "example": "Black"
          }
        },
        "required": ["category_id", "name", "price", "quantity", "slug"]
      },
      "CategoryRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 255,
            "example": "Travel Backpacks"
          },
          "description": {
            "type": "string",
            "nullable": true,
            "example": "Backpacks designed for travel and outdoor activities"
          },
          "slug": {
            "type": "string",
            "maxLength": 255,
            "pattern": "^[a-z0-9]+(?:-[a-z0-9]+)*$",
            "example": "travel-backpacks"
          },
          "image": {
            "type": "string",
            "nullable": true,
            "maxLength": 255,
            "example": "uploads/categories/travel-backpacks.jpg"
          }
        },
        "required": ["name", "slug"]
      },
      "BrandRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 255,
            "example": "Nike"
          },
          "description": {
            "type": "string",
            "nullable": true,
            "example": "Leading sports and outdoor brand"
          },
          "slug": {
            "type": "string",
            "maxLength": 255,
            "pattern": "^[a-z0-9]+(?:-[a-z0-9]+)*$",
            "example": "nike"
          },
          "logo": {
            "type": "string",
            "nullable": true,
            "maxLength": 255,
            "example": "uploads/brands/nike-logo.png"
          },
          "status": {
            "type": "string",
            "enum": ["active", "inactive"],
            "example": "active"
          }
        },
        "required": ["name", "slug", "status"]
      },
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1
          },
          "name": {
            "type": "string",
            "example": "John Doe"
          },
          "email": {
            "type": "string",
            "format": "email",
            "example": "john@example.com"
          },
          "email_verified_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "phone": {
            "type": "string",
            "nullable": true,
            "example": "0123456789"
          },
          "address": {
            "type": "string",
            "nullable": true,
            "example": "123 Main Street, City"
          },
          "role": {
            "type": "string",
            "enum": ["admin", "user"],
            "example": "user"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": ["id", "name", "email", "role"]
      },
      "AddressBook": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1
          },
          "user_id": {
            "type": "integer",
            "example": 1
          },
          "name": {
            "type": "string",
            "example": "John Doe"
          },
          "phone": {
            "type": "string",
            "example": "0123456789"
          },
          "address": {
            "type": "string",
            "example": "123 Main Street"
          },
          "ward": {
            "type": "string",
            "example": "Ward 1"
          },
          "district": {
            "type": "string",
            "example": "District 1"
          },
          "province": {
            "type": "string",
            "example": "Ho Chi Minh City"
          },
          "is_default": {
            "type": "boolean",
            "example": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": ["id", "user_id", "name", "phone", "address", "ward", "district", "province"]
      },
      "Order": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1
          },
          "user_id": {
            "type": "integer",
            "example": 1
          },
          "total_amount": {
            "type": "number",
            "format": "decimal",
            "example": 599.98
          },
          "status": {
            "type": "string",
            "enum": ["pending", "confirmed", "shipped", "delivered", "cancelled"],
            "example": "pending"
          },
          "payment_status": {
            "type": "string",
            "enum": ["pending", "paid", "failed"],
            "example": "pending"
          },
          "shipping_address": {
            "type": "string",
            "example": "123 Main Street, Ward 1, District 1, Ho Chi Minh City"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "order_details": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer"
                },
                "product_id": {
                  "type": "integer"
                },
                "quantity": {
                  "type": "integer"
                },
                "price": {
                  "type": "number",
                  "format": "decimal"
                },
                "product": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          }
        }
      },
      "LoginRequest": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "example": "john@example.com"
          },
          "password": {
            "type": "string",
            "minLength": 6,
            "example": "password123"
          }
        },
        "required": ["email", "password"]
      },
      "RegisterRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 255,
            "example": "John Doe"
          },
          "email": {
            "type": "string",
            "format": "email",
            "maxLength": 255,
            "example": "john@example.com"
          },
          "password": {
            "type": "string",
            "minLength": 6,
            "example": "password123"
          },
          "password_confirmation": {
            "type": "string",
            "minLength": 6,
            "example": "password123"
          },
          "phone": {
            "type": "string",
            "nullable": true,
            "maxLength": 15,
            "example": "0123456789"
          },
          "address": {
            "type": "string",
            "nullable": true,
            "maxLength": 500,
            "example": "123 Main Street, City"
          }
        },
        "required": ["name", "email", "password", "password_confirmation"]
      },
      "UpdateProfileRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 255,
            "example": "John Doe"
          },
          "phone": {
            "type": "string",
            "nullable": true,
            "maxLength": 15,
            "example": "0123456789"
          },
          "address": {
            "type": "string",
            "nullable": true,
            "maxLength": 500,
            "example": "123 Main Street, City"
          }
        },
        "required": ["name"]
      },
      "ChangePasswordRequest": {
        "type": "object",
        "properties": {
          "current_password": {
            "type": "string",
            "minLength": 6,
            "example": "currentpassword"
          },
          "new_password": {
            "type": "string",
            "minLength": 6,
            "example": "newpassword123"
          },
          "new_password_confirmation": {
            "type": "string",
            "minLength": 6,
            "example": "newpassword123"
          }
        },
        "required": ["current_password", "new_password", "new_password_confirmation"]
      },
      "AddressBookRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 255,
            "example": "John Doe"
          },
          "phone": {
            "type": "string",
            "maxLength": 15,
            "example": "0123456789"
          },
          "address": {
            "type": "string",
            "maxLength": 500,
            "example": "123 Main Street"
          },
          "ward": {
            "type": "string",
            "maxLength": 255,
            "example": "Ward 1"
          },
          "district": {
            "type": "string",
            "maxLength": 255,
            "example": "District 1"
          },
          "province": {
            "type": "string",
            "maxLength": 255,
            "example": "Ho Chi Minh City"
          },
          "is_default": {
            "type": "boolean",
            "example": false
          }
        },
        "required": ["name", "phone", "address", "ward", "district", "province"]
      },
      "AuthResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Login successful"
          },
          "user": {
            "$ref": "#/components/schemas/User"
          },
          "access_token": {
            "type": "string",
            "example": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
          },
          "token_type": {
            "type": "string",
            "example": "bearer"
          },
          "expires_in": {
            "type": "integer",
            "example": 3600
          }
        }
      },
      "UserStatsResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "totalOrders": {
                "type": "integer",
                "example": 5
              },
              "totalSpent": {
                "type": "number",
                "format": "decimal",
                "example": 1299.95
              },
              "pendingOrders": {
                "type": "integer",
                "example": 1
              },
              "completedOrders": {
                "type": "integer",
                "example": 4
              }
            }
          }
        }
      },
      "AddressBookListResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AddressBook"
            }
          }
        }
      },
      "AddressBookResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/AddressBook"
          }
        }
      },
      "PaginationMeta": {
        "type": "object",
        "properties": {
          "current_page": {
            "type": "integer",
            "example": 1
          },
          "from": {
            "type": "integer",
            "example": 1
          },
          "last_page": {
            "type": "integer",
            "example": 5
          },
          "per_page": {
            "type": "integer",
            "example": 12
          },
          "to": {
            "type": "integer",
            "example": 12
          },
          "total": {
            "type": "integer",
            "example": 55
          }
        }
      },
      "PaginationLinks": {
        "type": "object",
        "properties": {
          "first": {
            "type": "string",
            "nullable": true,
            "example": "http://localhost:8000/api/products?page=1"
          },
          "last": {
            "type": "string",
            "nullable": true,
            "example": "http://localhost:8000/api/products?page=5"
          },
          "prev": {
            "type": "string",
            "nullable": true,
            "example": null
          },
          "next": {
            "type": "string",
            "nullable": true,
            "example": "http://localhost:8000/api/products?page=2"
          }
        }
      },
      "ProductListResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Product"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/PaginationMeta"
          },
          "links": {
            "$ref": "#/components/schemas/PaginationLinks"
          }
        }
      },
      "ProductResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Product"
          }
        }
      },
      "CategoryListResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Category"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/PaginationMeta"
          },
          "links": {
            "$ref": "#/components/schemas/PaginationLinks"
          }
        }
      },
      "CategoryResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Category"
          }
        }
      },
      "BrandListResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Brand"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/PaginationMeta"
          },
          "links": {
            "$ref": "#/components/schemas/PaginationLinks"
          }
        }
      },
      "BrandResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Brand"
          }
        }
      },
      "News": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1
          },
          "title": {
            "type": "string",
            "example": "Latest Backpack Trends for 2025"
          },
          "description": {
            "type": "string",
            "example": "Discover the newest trends in backpack design and functionality for the upcoming year."
          },
          "thumbnail": {
            "type": "string",
            "nullable": true,
            "example": "uploads/news/backpack-trends-2025.jpg"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": ["id", "title", "description"]
      },
      "Contact": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1
          },
          "fullname": {
            "type": "string",
            "example": "John Doe"
          },
          "email": {
            "type": "string",
            "format": "email",
            "example": "john@example.com"
          },
          "message": {
            "type": "string",
            "example": "I would like to inquire about your products and services."
          },
          "status": {
            "type": "string",
            "enum": ["pending", "replied", "resolved"],
            "example": "pending"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": ["id", "fullname", "email", "message", "status"]
      },
      "ProductFeatureResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Product"
            }
          }
        }
      },
      "NewsRequest": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "maxLength": 255,
            "example": "Latest Backpack Trends for 2025"
          },
          "description": {
            "type": "string",
            "example": "Discover the newest trends in backpack design and functionality."
          },
          "thumbnail": {
            "type": "string",
            "nullable": true,
            "maxLength": 255,
            "example": "uploads/news/backpack-trends-2025.jpg"
          }
        },
        "required": ["title", "description"]
      },
      "ContactRequest": {
        "type": "object",
        "properties": {
          "fullname": {
            "type": "string",
            "maxLength": 255,
            "example": "John Doe"
          },
          "email": {
            "type": "string",
            "format": "email",
            "maxLength": 255,
            "example": "john@example.com"
          },
          "message": {
            "type": "string",
            "minLength": 10,
            "maxLength": 1000,
            "example": "I would like to inquire about your products and services."
          }
        },
        "required": ["fullname", "email", "message"]
      },
      "NewsListResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/News"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/PaginationMeta"
          },
          "links": {
            "$ref": "#/components/schemas/PaginationLinks"
          }
        }
      },
      "NewsResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/News"
          }
        }
      },
      "ContactListResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Contact"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/PaginationMeta"
          },
          "links": {
            "$ref": "#/components/schemas/PaginationLinks"
          }
        }
      },
      "ContactResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Contact"
          }
        }
      },
      "Voucher": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1
          },
          "code": {
            "type": "string",
            "example": "WELCOME10"
          },
          "price": {
            "type": "number",
            "format": "decimal",
            "example": 50000.00
          },
          "end_at": {
            "type": "string",
            "format": "date-time",
            "example": "2025-09-18T10:30:00.000000Z"
          },
          "quantity": {
            "type": "integer",
            "example": 100
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": ["id", "code", "price", "end_at", "quantity"]
      },
      "OrderListResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderEntity"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/PaginationMeta"
          },
          "links": {
            "$ref": "#/components/schemas/PaginationLinks"
          }
        }
      },
      "OrderResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/OrderEntity"
          }
        }
      },
      "OrderStatsResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "total_orders": {
                "type": "integer",
                "example": 15
              },
              "pending_orders": {
                "type": "integer",
                "example": 3
              },
              "paid_orders": {
                "type": "integer",
                "example": 10
              },
              "failed_orders": {
                "type": "integer",
                "example": 2
              },
              "total_spent": {
                "type": "number",
                "format": "decimal",
                "example": 2599.95
              }
            }
          }
        }
      },
      "VoucherListResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Voucher"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/PaginationMeta"
          },
          "links": {
            "$ref": "#/components/schemas/PaginationLinks"
          }
        }
      },
      "VoucherResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Voucher"
          }
        }
      },
      "VoucherValidationResponse": {
        "type": "object",
        "properties": {
          "valid": {
            "type": "boolean",
            "example": true
          },
          "message": {
            "type": "string",
            "example": "Mã voucher hợp lệ"
          },
          "data": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "example": 1
              },
              "code": {
                "type": "string",
                "example": "WELCOME10"
              },
              "discount": {
                "type": "number",
                "format": "decimal",
                "example": 50000
              },
              "end_at": {
                "type": "string",
                "format": "date-time"
              },
              "remaining": {
                "type": "integer",
                "example": 99
              }
            }
          }
        }
      },
      "CommentRequest": {
        "type": "object",
        "properties": {
          "product_id": {
            "type": "integer",
            "example": 1
          },
          "comment": {
            "type": "string",
            "minLength": 10,
            "maxLength": 1000,
            "example": "Sản phẩm rất tốt, chất lượng vượt mong đợi! Giao hàng nhanh chóng."
          }
        },
        "required": ["product_id", "comment"]
      },
      "CommentListResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Comment"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/PaginationMeta"
          },
          "links": {
            "$ref": "#/components/schemas/PaginationLinks"
          }
        }
      },
      "CommentResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Comment"
          }
        }
      },
      "OrderEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1
          },
          "user_id": {
            "type": "integer",
            "example": 1
          },
          "address_id": {
            "type": "integer",
            "example": 1
          },
          "payment_method_id": {
            "type": "integer",
            "example": 1
          },
          "voucher_id": {
            "type": "integer",
            "nullable": true,
            "example": 1
          },
          "comment": {
            "type": "string",
            "nullable": true,
            "example": "Please deliver in the afternoon"
          },
          "total_price": {
            "type": "number",
            "format": "decimal",
            "example": 599.98
          },
          "payment_status": {
            "type": "string",
            "enum": ["pending", "paid", "failed"],
            "example": "pending"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "user": {
            "$ref": "#/components/schemas/User"
          },
          "address": {
            "$ref": "#/components/schemas/AddressBook"
          },
          "payment_method": {
            "$ref": "#/components/schemas/PaymentMethod"
          },
          "voucher": {
            "$ref": "#/components/schemas/Voucher"
          },
          "order_details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderDetail"
            }
          }
        },
        "required": ["id", "user_id", "address_id", "payment_method_id", "total_price", "payment_status"]
      },
      "OrderRequest": {
        "type": "object",
        "properties": {
          "address_id": {
            "type": "integer",
            "example": 1
          },
          "payment_method_id": {
            "type": "integer",
            "example": 1
          },
          "voucher_id": {
            "type": "integer",
            "nullable": true,
            "example": 1
          },
          "comment": {
            "type": "string",
            "nullable": true,
            "maxLength": 500,
            "example": "Please deliver in the afternoon"
          },
          "items": {
            "type": "array",
            "minItems": 1,
            "items": {
              "type": "object",
              "properties": {
                "product_id": {
                  "type": "integer",
                  "example": 1
                },
                "quantity": {
                  "type": "integer",
                  "minimum": 1,
                  "example": 2
                }
              },
              "required": ["product_id", "quantity"]
            }
          }
        },
        "required": ["address_id", "payment_method_id", "items"]
      },
      "VoucherRequest": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "maxLength": 20,
            "pattern": "^[A-Z0-9]+$",
            "example": "WELCOME10"
          },
          "price": {
            "type": "number",
            "minimum": 1000,
            "example": 50000
          },
          "end_at": {
            "type": "string",
            "format": "date-time",
            "example": "2025-12-31T23:59:59.000000Z"
          },
          "quantity": {
            "type": "integer",
            "minimum": 1,
            "example": 100
          }
        },
        "required": ["code", "price", "end_at", "quantity"]
      },
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "The given data was invalid."
          },
          "errors": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "example": {
              "email": ["The email field is required."],
              "password": ["The password must be at least 6 characters."]
            }
          }
        }
      },
      "ValidationErrorResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": false
          },
          "message": {
            "type": "string",
            "example": "Dữ liệu không hợp lệ"
          },
          "errors": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "example": {
              "name": ["Tên chiến dịch là bắt buộc"],
              "start_date": ["Ngày bắt đầu phải là một ngày hợp lệ"]
            }
          }
        }
      },
      "SuccessResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Operation completed successfully"
          },
          "data": {
            "type": "object",
            "additionalProperties": true
          }
        }
      },
      "PaymentMethod": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1
          },
          "name": {
            "type": "string",
            "example": "cod"
          },
          "display_name": {
            "type": "string",
            "example": "Cash on Delivery"
          },
          "status": {
            "type": "string",
            "enum": ["active", "inactive"],
            "example": "active"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": ["id", "name", "display_name", "status"]
      },
      "OrderDetail": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1
          },
          "order_id": {
            "type": "integer",
            "example": 1
          },
          "product_id": {
            "type": "integer",
            "example": 1
          },
          "price": {
            "type": "number",
            "format": "decimal",
            "example": 299.99
          },
          "quantity": {
            "type": "integer",
            "example": 2
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "product": {
            "$ref": "#/components/schemas/Product"
          }
        },
        "required": ["id", "order_id", "product_id", "price", "quantity"]
      },
      "SaleCampaign": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1
          },
          "name": {
            "type": "string",
            "example": "Black Friday 2025"
          },
          "slug": {
            "type": "string",
            "example": "black-friday-2025"
          },
          "description": {
            "type": "string",
            "nullable": true,
            "example": "Siêu sale Black Friday - Giảm giá khủng lên đến 70% tất cả sản phẩm balo"
          },
          "banner_image": {
            "type": "string",
            "nullable": true,
            "example": "campaigns/black-friday-2025.jpg"
          },
          "start_date": {
            "type": "string",
            "format": "date-time",
            "example": "2025-11-24T00:00:00Z"
          },
          "end_date": {
            "type": "string",
            "format": "date-time",
            "example": "2025-11-30T23:59:59Z"
          },
          "status": {
            "type": "string",
            "enum": ["draft", "active", "expired", "cancelled"],
            "example": "active"
          },
          "is_featured": {
            "type": "boolean",
            "example": true
          },
          "priority": {
            "type": "integer",
            "example": 100
          },
          "metadata": {
            "type": "object",
            "nullable": true,
            "example": {
              "color": "#000000",
              "tags": ["black-friday", "mega-sale"],
              "description_short": "Giảm giá lên đến 70%"
            }
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "sale_products": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SaleProduct"
            }
          }
        },
        "required": ["id", "name", "slug", "start_date", "end_date", "status"]
      },
      "SaleProduct": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1
          },
          "sale_campaign_id": {
            "type": "integer",
            "example": 1
          },
          "product_id": {
            "type": "integer",
            "example": 1
          },
          "original_price": {
            "type": "number",
            "format": "decimal",
            "example": 1000000.00
          },
          "sale_price": {
            "type": "number",
            "format": "decimal",
            "example": 700000.00
          },
          "discount_percentage": {
            "type": "number",
            "format": "decimal",
            "example": 30.00
          },
          "discount_amount": {
            "type": "number",
            "format": "decimal",
            "example": 300000.00
          },
          "discount_type": {
            "type": "string",
            "enum": ["percentage", "fixed_amount"],
            "example": "percentage"
          },
          "start_date": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "example": "2025-11-24T00:00:00Z"
          },
          "end_date": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "example": "2025-11-30T23:59:59Z"
          },
          "max_quantity": {
            "type": "integer",
            "nullable": true,
            "example": 50
          },
          "sold_quantity": {
            "type": "integer",
            "example": 0
          },
          "is_active": {
            "type": "boolean",
            "example": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "product": {
            "$ref": "#/components/schemas/Product"
          },
          "sale_campaign": {
            "$ref": "#/components/schemas/SaleCampaign"
          }
        },
        "required": ["id", "sale_campaign_id", "product_id", "original_price", "sale_price"]
      },
      "SaleCampaignRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Black Friday 2025"
          },
          "slug": {
            "type": "string",
            "example": "black-friday-2025"
          },
          "description": {
            "type": "string",
            "nullable": true,
            "example": "Siêu sale Black Friday - Giảm giá khủng lên đến 70%"
          },
          "banner_image": {
            "type": "string",
            "nullable": true,
            "example": "campaigns/black-friday-2025.jpg"
          },
          "start_date": {
            "type": "string",
            "format": "date-time",
            "example": "2025-11-24T00:00:00Z"
          },
          "end_date": {
            "type": "string",
            "format": "date-time",
            "example": "2025-11-30T23:59:59Z"
          },
          "status": {
            "type": "string",
            "enum": ["draft", "active", "expired", "cancelled"],
            "example": "active"
          },
          "is_featured": {
            "type": "boolean",
            "example": true
          },
          "priority": {
            "type": "integer",
            "example": 100
          },
          "metadata": {
            "type": "object",
            "nullable": true,
            "example": {
              "color": "#000000",
              "tags": ["black-friday", "mega-sale"],
              "description_short": "Giảm giá lên đến 70%"
            }
          }
        },
        "required": ["name", "slug", "start_date", "end_date", "status"]
      },
      "AddProductsToSaleRequest": {
        "type": "object",
        "properties": {
          "products": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "product_id": {
                  "type": "integer",
                  "example": 1
                },
                "sale_price": {
                  "type": "number",
                  "format": "decimal",
                  "example": 700000.00
                },
                "discount_type": {
                  "type": "string",
                  "enum": ["percentage", "fixed_amount"],
                  "example": "percentage"
                },
                "max_quantity": {
                  "type": "integer",
                  "nullable": true,
                  "example": 50
                }
              },
              "required": ["product_id", "sale_price"]
            }
          }
        },
        "required": ["products"]
      }
    }
  },
  "paths": {
    "/products": {
      "get": {
        "tags": ["Products"],
        "summary": "Get list of products",
        "description": "Retrieve a paginated list of products with optional filtering and sorting",
        "parameters": [
          {
            "name": "search",
            "in": "query",
            "description": "Search products by name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "category_id",
            "in": "query",
            "description": "Filter by category ID",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "brand_id",
            "in": "query",
            "description": "Filter by brand ID",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "min_price",
            "in": "query",
            "description": "Minimum price filter",
            "required": false,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "max_price",
            "in": "query",
            "description": "Maximum price filter",
            "required": false,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "color",
            "in": "query",
            "description": "Filter by color",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "in_stock",
            "in": "query",
            "description": "Filter products in stock only",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "sort_by",
            "in": "query",
            "description": "Sort by field",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["created_at", "name", "price", "quantity"],
              "default": "created_at"
            }
          },
          {
            "name": "sort_order",
            "in": "query",
            "description": "Sort order",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["asc", "desc"],
              "default": "desc"
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of products per page",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 12,
              "minimum": 1,
              "maximum": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductListResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Products"],
        "summary": "Create a new product",
        "description": "Create a new product (admin access required)",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Product created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/products/{id}": {
      "get": {
        "tags": ["Products"],
        "summary": "Get product details",
        "description": "Retrieve detailed information about a specific product",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Product ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductResponse"
                }
              }
            }
          },
          "404": {
            "description": "Product not found"
          }
        }
      },
      "put": {
        "tags": ["Products"],
        "summary": "Update product",
        "description": "Update an existing product (admin access required)",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Product ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Product updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Product not found"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "delete": {
        "tags": ["Products"],
        "summary": "Delete product",
        "description": "Delete a product (admin access required). Cannot delete products that have been ordered.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Product ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Product deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Product deleted successfully"
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Cannot delete product that has been ordered",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Product not found"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/products-featured": {
      "get": {
        "tags": ["Products"],
        "summary": "Get featured products",
        "description": "Retrieve a list of 8 featured products that are in stock, ordered by creation date",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Product"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/products/category/{categorySlug}": {
      "get": {
        "tags": ["Products"],
        "summary": "Get products by category",
        "description": "Retrieve products belonging to a specific category using category slug",
        "parameters": [
          {
            "name": "categorySlug",
            "in": "path",
            "description": "Category slug",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "travel-backpacks"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductListResponse"
                }
              }
            }
          },
          "404": {
            "description": "Category not found"
          }
        }
      }
    },
    "/products/brand/{brandSlug}": {
      "get": {
        "tags": ["Products"],
        "summary": "Get products by brand",
        "description": "Retrieve products belonging to a specific brand using brand slug",
        "parameters": [
          {
            "name": "brandSlug",
            "in": "path",
            "description": "Brand slug",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "nike"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductListResponse"
                }
              }
            }
          },
          "404": {
            "description": "Brand not found"
          }
        }
      }
    },
    "/products-search": {
      "get": {
        "tags": ["Products"],
        "summary": "Search products",
        "description": "Search products by name, description, category name, or brand name",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Search query",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "backpack"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Search query is required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {}
                    },
                    "message": {
                      "type": "string",
                      "example": "Search query is required"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/sale-campaigns": {
      "get": {
        "tags": ["Sale Campaigns"],
        "summary": "Get list of sale campaigns",
        "description": "Retrieve a paginated list of sale campaigns with optional filtering",
        "security": [{"bearerAuth": []}],
        "parameters": [
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of campaigns per page (default: 15, max: 100)",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 15
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Filter by campaign status",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["draft", "active", "expired", "cancelled"]
            }
          },
          {
            "name": "featured",
            "in": "query",
            "description": "Filter by featured campaigns",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Sale campaigns retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/SaleCampaign"
                          }
                        },
                        "current_page": {
                          "type": "integer",
                          "example": 1
                        },
                        "last_page": {
                          "type": "integer",
                          "example": 3
                        },
                        "per_page": {
                          "type": "integer",
                          "example": 15
                        },
                        "total": {
                          "type": "integer",
                          "example": 45
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Sale Campaigns"],
        "summary": "Create a new sale campaign",
        "description": "Create a new sale campaign (Admin only)",
        "security": [{"bearerAuth": []}],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SaleCampaignRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Sale campaign created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Chiến dịch sale đã được tạo thành công"
                    },
                    "data": {
                      "$ref": "#/components/schemas/SaleCampaign"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/sale-campaigns/{id}": {
      "get": {
        "tags": ["Sale Campaigns"],
        "summary": "Get sale campaign details",
        "description": "Retrieve details of a specific sale campaign",
        "security": [{"bearerAuth": []}],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Sale campaign ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Sale campaign details retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "$ref": "#/components/schemas/SaleCampaign"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Sale campaign not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Sale Campaigns"],
        "summary": "Update sale campaign",
        "description": "Update an existing sale campaign (Admin only)",
        "security": [{"bearerAuth": []}],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Sale campaign ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SaleCampaignRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Sale campaign updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Chiến dịch sale đã được cập nhật thành công"
                    },
                    "data": {
                      "$ref": "#/components/schemas/SaleCampaign"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Sale campaign not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Sale Campaigns"],
        "summary": "Delete sale campaign",
        "description": "Delete an existing sale campaign (Admin only)",
        "security": [{"bearerAuth": []}],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Sale campaign ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Sale campaign deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Chiến dịch sale đã được xóa thành công"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Sale campaign not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/sale-campaigns-active": {
      "get": {
        "tags": ["Sale Campaigns"],
        "summary": "Get active sale campaigns",
        "description": "Retrieve list of currently active sale campaigns (Public endpoint)",
        "parameters": [
          {
            "name": "featured",
            "in": "query",
            "description": "Filter by featured campaigns only",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Active sale campaigns retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/SaleCampaign"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/sale-campaigns/{id}/products": {
      "get": {
        "tags": ["Sale Campaigns"],
        "summary": "Get products in sale campaign",
        "description": "Retrieve paginated list of products in a specific sale campaign",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Sale campaign ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of products per page (default: 15, max: 100)",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 15
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Campaign products retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Product"
                          }
                        },
                        "current_page": {
                          "type": "integer",
                          "example": 1
                        },
                        "last_page": {
                          "type": "integer",
                          "example": 3
                        },
                        "per_page": {
                          "type": "integer",
                          "example": 15
                        },
                        "total": {
                          "type": "integer",
                          "example": 45
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Sale campaign not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Sale Campaigns"],
        "summary": "Add products to sale campaign",
        "description": "Add products to an existing sale campaign (Admin only)",
        "security": [{"bearerAuth": []}],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Sale campaign ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddProductsToSaleRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Products added to sale campaign successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Đã thêm 5 sản phẩm vào chiến dịch sale thành công"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "added_count": {
                          "type": "integer",
                          "example": 5
                        },
                        "updated_count": {
                          "type": "integer",
                          "example": 2
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Sale campaign not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/sale-campaigns/{id}/products/{productId}": {
      "delete": {
        "tags": ["Sale Campaigns"],
        "summary": "Remove product from sale campaign",
        "description": "Remove a specific product from sale campaign (Admin only)",
        "security": [{"bearerAuth": []}],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Sale campaign ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "productId",
            "in": "path",
            "description": "Product ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Product removed from sale campaign successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Đã xóa sản phẩm khỏi chiến dịch sale thành công"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Sale campaign or product not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/products-on-sale": {
      "get": {
        "tags": ["Sale Campaigns"],
        "summary": "Get products currently on sale",
        "description": "Retrieve paginated list of products that are currently on sale (Public endpoint)",
        "parameters": [
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of products per page (default: 15, max: 100)",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 15
            }
          },
          {
            "name": "category_id",
            "in": "query",
            "description": "Filter by category ID",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "brand_id",
            "in": "query",
            "description": "Filter by brand ID",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "min_price",
            "in": "query",
            "description": "Minimum sale price filter",
            "required": false,
            "schema": {
              "type": "number",
              "format": "decimal"
            }
          },
          {
            "name": "max_price",
            "in": "query",
            "description": "Maximum sale price filter",
            "required": false,
            "schema": {
              "type": "number",
              "format": "decimal"
            }
          },
          {
            "name": "min_discount",
            "in": "query",
            "description": "Minimum discount percentage filter",
            "required": false,
            "schema": {
              "type": "number",
              "minimum": 0,
              "maximum": 100
            }
          },
          {
            "name": "max_discount",
            "in": "query",
            "description": "Maximum discount percentage filter",
            "required": false,
            "schema": {
              "type": "number",
              "minimum": 0,
              "maximum": 100
            }
          },
          {
            "name": "sort_by",
            "in": "query",
            "description": "Sort products by field",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["name", "price", "sale_price", "discount", "created_at"]
            }
          },
          {
            "name": "sort_order",
            "in": "query",
            "description": "Sort order",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["asc", "desc"],
              "default": "asc"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Products on sale retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Product"
                          }
                        },
                        "current_page": {
                          "type": "integer",
                          "example": 1
                        },
                        "last_page": {
                          "type": "integer",
                          "example": 3
                        },
                        "per_page": {
                          "type": "integer",
                          "example": 15
                        },
                        "total": {
                          "type": "integer",
                          "example": 45
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/products/{id}/sale-campaigns": {
      "get": {
        "tags": ["Sale Campaigns"],
        "summary": "Get sale campaigns for product",
        "description": "Retrieve list of sale campaigns that include a specific product",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Product ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Product sale campaigns retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/SaleCampaign"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Product not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/admin/sale-campaigns/{id}/toggle-status": {
      "patch": {
        "tags": ["Sale Campaigns"],
        "summary": "Toggle sale campaign status",
        "description": "Toggle sale campaign status between active/inactive (Admin only)",
        "security": [{"bearerAuth": []}],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Sale campaign ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Sale campaign status toggled successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Trạng thái chiến dịch đã được cập nhật"
                    },
                    "data": {
                      "$ref": "#/components/schemas/SaleCampaign"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Sale campaign not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/admin/sale-campaigns/{id}/toggle-featured": {
      "patch": {
        "tags": ["Sale Campaigns"],
        "summary": "Toggle sale campaign featured status",
        "description": "Toggle sale campaign featured status (Admin only)",
        "security": [{"bearerAuth": []}],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Sale campaign ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Sale campaign featured status toggled successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Trạng thái nổi bật đã được cập nhật"
                    },
                    "data": {
                      "$ref": "#/components/schemas/SaleCampaign"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Sale campaign not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/admin/sale-campaigns/{id}/duplicate": {
      "post": {
        "tags": ["Sale Campaigns"],
        "summary": "Duplicate sale campaign",
        "description": "Create a copy of an existing sale campaign (Admin only)",
        "security": [{"bearerAuth": []}],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Sale campaign ID to duplicate",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Sale campaign duplicated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Chiến dịch đã được sao chép thành công"
                    },
                    "data": {
                      "$ref": "#/components/schemas/SaleCampaign"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Sale campaign not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/admin/sale-campaigns/stats": {
      "get": {
        "tags": ["Sale Campaigns"],
        "summary": "Get sale campaigns statistics",
        "description": "Retrieve statistics about sale campaigns (Admin only)",
        "security": [{"bearerAuth": []}],
        "responses": {
          "200": {
            "description": "Sale campaigns statistics retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "total_campaigns": {
                          "type": "integer",
                          "example": 25
                        },
                        "active_campaigns": {
                          "type": "integer",
                          "example": 5
                        },
                        "draft_campaigns": {
                          "type": "integer",
                          "example": 3
                        },
                        "expired_campaigns": {
                          "type": "integer",
                          "example": 15
                        },
                        "featured_campaigns": {
                          "type": "integer",
                          "example": 2
                        },
                        "total_products_on_sale": {
                          "type": "integer",
                          "example": 150
                        },
                        "average_discount": {
                          "type": "number",
                          "format": "decimal",
                          "example": 35.5
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/categories": {
      "get": {
        "tags": ["Categories"],
        "summary": "Get list of categories",
        "description": "Retrieve a paginated list of categories with optional search and product count",
        "parameters": [
          {
            "name": "search",
            "in": "query",
            "description": "Search categories by name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of categories per page",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 15,
              "minimum": 1,
              "maximum": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryListResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Categories"],
        "summary": "Create a new category",
        "description": "Create a new category (admin access required)",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CategoryRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Category created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Category created successfully"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Category"
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/categories/{id}": {
      "get": {
        "tags": ["Categories"],
        "summary": "Get category details",
        "description": "Retrieve detailed information about a specific category including products",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Category ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryResponse"
                }
              }
            }
          },
          "404": {
            "description": "Category not found"
          }
        }
      },
      "put": {
        "tags": ["Categories"],
        "summary": "Update category",
        "description": "Update an existing category (admin access required)",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Category ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CategoryRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Category updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Category updated successfully"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Category"
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Category not found"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "delete": {
        "tags": ["Categories"],
        "summary": "Delete category",
        "description": "Delete a category (admin access required). Cannot delete categories that have products.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Category ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Category deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Category deleted successfully"
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Cannot delete category that has products",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Category not found"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/categories-with-products": {
      "get": {
        "tags": ["Categories"],
        "summary": "Get categories with products",
        "description": "Retrieve categories with their associated products for homepage display",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Category"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/brands": {
      "get": {
        "tags": ["Brands"],
        "summary": "Get list of brands",
        "description": "Retrieve a paginated list of brands with optional search and status filter",
        "parameters": [
          {
            "name": "search",
            "in": "query",
            "description": "Search brands by name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Filter by status",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["active", "inactive"]
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of brands per page",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 15,
              "minimum": 1,
              "maximum": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrandListResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Brands"],
        "summary": "Create a new brand",
        "description": "Create a new brand (admin access required)",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BrandRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Brand created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Brand created successfully"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Brand"
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/brands/{id}": {
      "get": {
        "tags": ["Brands"],
        "summary": "Get brand details",
        "description": "Retrieve detailed information about a specific brand including products",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Brand ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrandResponse"
                }
              }
            }
          },
          "404": {
            "description": "Brand not found"
          }
        }
      },
      "put": {
        "tags": ["Brands"],
        "summary": "Update brand",
        "description": "Update an existing brand (admin access required)",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Brand ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BrandRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Brand updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Brand updated successfully"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Brand"
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Brand not found"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "delete": {
        "tags": ["Brands"],
        "summary": "Delete brand",
        "description": "Delete a brand (admin access required). Cannot delete brands that have products.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Brand ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Brand deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Brand deleted successfully"
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Cannot delete brand that has products",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Brand not found"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "tags": ["Authentication"],
        "summary": "User login",
        "description": "Authenticate user and return access token",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/auth/register": {
      "post": {
        "tags": ["Authentication"],
        "summary": "User registration",
        "description": "Register a new user account",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Registration successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/auth/logout": {
      "post": {
        "tags": ["Authentication"],
        "summary": "User logout",
        "description": "Logout user and invalidate token",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Logout successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Successfully logged out"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/auth/refresh": {
      "post": {
        "tags": ["Authentication"],
        "summary": "Refresh access token",
        "description": "Refresh the current access token",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Token refreshed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/auth/me": {
      "get": {
        "tags": ["Authentication"],
        "summary": "Get current user",
        "description": "Get the currently authenticated user's information",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "User information retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/User"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/profile": {
      "get": {
        "tags": ["User Profile"],
        "summary": "Get user profile",
        "description": "Get the current user's profile information",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Profile retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/User"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["User Profile"],
        "summary": "Update user profile",
        "description": "Update the current user's profile information",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProfileRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Profile updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Profile updated successfully"
                    },
                    "data": {
                      "$ref": "#/components/schemas/User"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/change-password": {
      "put": {
        "tags": ["User Profile"],
        "summary": "Change user password",
        "description": "Change the current user's password",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangePasswordRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password changed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Password changed successfully"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Current password is incorrect",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/user-stats": {
      "get": {
        "tags": ["User Profile"],
        "summary": "Get user statistics",
        "description": "Get the current user's statistics (orders, total spent, etc.)",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "User statistics retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserStatsResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/delete-account": {
      "delete": {
        "tags": ["User Profile"],
        "summary": "Delete user account",
        "description": "Delete the current user's account permanently",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Account deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Account deleted successfully"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/address-books": {
      "get": {
        "tags": ["Address Book"],
        "summary": "Get user's address books",
        "description": "Retrieve all address books for the authenticated user",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Address books retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddressBookListResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Address Book"],
        "summary": "Create new address book",
        "description": "Create a new address book entry for the authenticated user",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddressBookRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Address book created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Address book created successfully"
                    },
                    "data": {
                      "$ref": "#/components/schemas/AddressBook"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/address-books/{id}": {
      "get": {
        "tags": ["Address Book"],
        "summary": "Get specific address book",
        "description": "Retrieve a specific address book by ID",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Address book ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Address book retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddressBookResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Address book not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Address Book"],
        "summary": "Update address book",
        "description": "Update a specific address book by ID",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Address book ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddressBookRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Address book updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Address book updated successfully"
                    },
                    "data": {
                      "$ref": "#/components/schemas/AddressBook"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Address book not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Address Book"],
        "summary": "Delete address book",
        "description": "Delete a specific address book by ID",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Address book ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Address book deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Address book deleted successfully"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Address book not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/brands-active": {
      "get": {
        "tags": ["Brands"],
        "summary": "Get active brands",
        "description": "Retrieve all active brands for frontend display",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Brand"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/news": {
      "get": {
        "tags": ["News"],
        "summary": "Get list of news",
        "description": "Retrieve a paginated list of news articles with optional search",
        "parameters": [
          {
            "name": "search",
            "in": "query",
            "description": "Search news by title",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of news per page",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 10,
              "minimum": 1,
              "maximum": 50
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NewsListResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["News"],
        "summary": "Create a new news article",
        "description": "Create a new news article (admin access required)",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewsRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "News article created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/news/{id}": {
      "get": {
        "tags": ["News"],
        "summary": "Get news details",
        "description": "Retrieve detailed information about a specific news article",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "News ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NewsResponse"
                }
              }
            }
          },
          "404": {
            "description": "News not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["News"],
        "summary": "Update news article",
        "description": "Update an existing news article (admin access required)",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "News ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "News article updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "News not found"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "delete": {
        "tags": ["News"],
        "summary": "Delete news article",
        "description": "Delete a news article (admin access required)",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "News ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "News article deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "News article deleted successfully"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "News not found"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/news-latest": {
      "get": {
        "tags": ["News"],
        "summary": "Get latest news",
        "description": "Retrieve the 6 most recent news articles",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/News"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/contacts": {
      "get": {
        "tags": ["Contact"],
        "summary": "Get list of contacts",
        "description": "Retrieve a paginated list of contact messages with optional filtering (admin access required)",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "description": "Filter by status",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["pending", "replied", "resolved"]
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "Search by fullname or email",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of contacts per page",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 15,
              "minimum": 1,
              "maximum": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactListResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Contact"],
        "summary": "Create contact message",
        "description": "Submit a new contact message or inquiry",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContactRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Contact message created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Contact message sent successfully"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Contact"
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/contacts/{id}": {
      "get": {
        "tags": ["Contact"],
        "summary": "Get contact details",
        "description": "Retrieve detailed information about a specific contact message (admin access required)",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Contact ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Contact not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/orders": {
      "get": {
        "tags": ["Orders"],
        "summary": "Get user's orders",
        "description": "Retrieve a paginated list of orders for the authenticated user",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "payment_status",
            "in": "query",
            "description": "Filter by payment status",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["pending", "paid", "failed"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Orders retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderListResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Orders"],
        "summary": "Create new order",
        "description": "Create a new order with products and payment information",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Order created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Đặt hàng thành công"
                    },
                    "data": {
                      "$ref": "#/components/schemas/OrderEntity"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request (insufficient stock, invalid voucher, etc.)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Address does not belong to user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/orders/{id}": {
      "get": {
        "tags": ["Orders"],
        "summary": "Get order details",
        "description": "Retrieve detailed information about a specific order",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Order ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Order details retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Order does not belong to user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Order not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/orders/{id}/cancel": {
      "post": {
        "tags": ["Orders"],
        "summary": "Cancel order",
        "description": "Cancel a pending order and restore product quantities",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Order ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Order cancelled successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Hủy đơn hàng thành công"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Cannot cancel non-pending order",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Order does not belong to user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Order not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/orders-stats": {
      "get": {
        "tags": ["Orders"],
        "summary": "Get order statistics",
        "description": "Get order statistics for the authenticated user",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Order statistics retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderStatsResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/vouchers": {
      "get": {
        "tags": ["Vouchers"],
        "summary": "Get list of vouchers",
        "description": "Retrieve a paginated list of vouchers with optional filtering (admin access required)",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "search",
            "in": "query",
            "description": "Search vouchers by code",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "active",
            "in": "query",
            "description": "Filter only active vouchers",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of vouchers per page",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 15,
              "minimum": 1,
              "maximum": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Vouchers retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VoucherListResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Vouchers"],
        "summary": "Create new voucher",
        "description": "Create a new voucher (admin access required)",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VoucherRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Voucher created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Voucher created successfully"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Voucher"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/vouchers/{id}": {
      "get": {
        "tags": ["Vouchers"],
        "summary": "Get voucher details",
        "description": "Retrieve detailed information about a specific voucher",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Voucher ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Voucher details retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VoucherResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Voucher not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Vouchers"],
        "summary": "Update voucher",
        "description": "Update an existing voucher (admin access required)",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Voucher ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VoucherRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Voucher updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Voucher updated successfully"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Voucher"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Voucher not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Vouchers"],
        "summary": "Delete voucher",
        "description": "Delete a voucher (admin access required). Cannot delete vouchers that have been used in orders.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Voucher ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Voucher deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Voucher deleted successfully"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Voucher not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Cannot delete voucher that has been used in orders",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Cannot delete voucher that has been used in orders."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/vouchers/validate": {
      "post": {
        "tags": ["Vouchers"],
        "summary": "Validate voucher code",
        "description": "Validate a voucher code to check if it's valid and active",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "code": {
                    "type": "string",
                    "example": "WELCOME10"
                  }
                },
                "required": ["code"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Voucher validation successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VoucherValidationResponse"
                }
              }
            }
          },
          "404": {
            "description": "Invalid or expired voucher",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/vouchers-active": {
      "get": {
        "tags": ["Vouchers"],
        "summary": "Get active vouchers",
        "description": "Retrieve all active vouchers for public display",
        "responses": {
          "200": {
            "description": "Active vouchers retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Voucher"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/user": {
      "get": {
        "tags": ["Authentication"],
        "summary": "Get current user (Sanctum)",
        "description": "Get current authenticated user information using Sanctum authentication",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "User information retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/comments": {
      "get": {
        "tags": ["Comments"],
        "summary": "Get list of comments",
        "description": "Retrieve a paginated list of comments with optional filtering",
        "parameters": [
          {
            "name": "product_id",
            "in": "query",
            "description": "Filter by product ID",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "user_id",
            "in": "query",
            "description": "Filter by user ID",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of comments per page",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 10,
              "minimum": 1,
              "maximum": 50
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Comments retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommentListResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Comments"],
        "summary": "Create new comment",
        "description": "Create a new comment for a product (requires purchase)",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommentRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Comment created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Bình luận đã được thêm thành công"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Comment"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Must purchase product to comment",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error or already commented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/comments/{id}": {
      "get": {
        "tags": ["Comments"],
        "summary": "Get comment details",
        "description": "Retrieve detailed information about a specific comment",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Comment ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Comment details retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommentResponse"
                }
              }
            }
          },
          "404": {
            "description": "Comment not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Comments"],
        "summary": "Update comment",
        "description": "Update an existing comment (only by comment owner)",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Comment ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "comment": {
                    "type": "string",
                    "minLength": 10,
                    "maxLength": 1000,
                    "example": "Sản phẩm rất tốt, chất lượng vượt mong đợi! (đã cập nhật)"
                  }
                },
                "required": ["comment"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Comment updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Bình luận đã được cập nhật"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Comment"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Cannot edit other user's comment",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Comment not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Comments"],
        "summary": "Delete comment",
        "description": "Delete a comment (only by comment owner)",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Comment ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Comment deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Bình luận đã được xóa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Cannot delete other user's comment",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Comment not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/comments/product/{productId}": {
      "get": {
        "tags": ["Comments"],
        "summary": "Get comments by product",
        "description": "Retrieve all comments for a specific product",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "Product ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of comments per page",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 10,
              "minimum": 1,
              "maximum": 50
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Product comments retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommentListResponse"
                }
              }
            }
          },
          "404": {
            "description": "Product not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/my-comments": {
      "get": {
        "tags": ["Comments"],
        "summary": "Get user's comments",
        "description": "Retrieve all comments made by the authenticated user",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of comments per page",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 10,
              "minimum": 1,
              "maximum": 50
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User comments retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommentListResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "Products",
      "description": "Product management operations"
    },
    {
      "name": "Categories",
      "description": "Category management operations"
    },
    {
      "name": "Brands",
      "description": "Brand management operations"
    },
    {
      "name": "Authentication",
      "description": "User authentication operations"
    },
    {
      "name": "User Profile",
      "description": "User profile management operations"
    },
    {
      "name": "Address Book",
      "description": "User address book management operations"
    },
    {
      "name": "News",
      "description": "News and articles management operations"
    },
    {
      "name": "Contact",
      "description": "Contact messages and inquiries management operations"
    },
    {
      "name": "Orders",
      "description": "Order management and tracking operations"
    },
    {
      "name": "Vouchers",
      "description": "Voucher and discount code management operations"
    },
    {
      "name": "Comments",
      "description": "Product comment and review management operations"
    },
    {
      "name": "Sale Campaigns",
      "description": "Sale campaign and promotion management operations"
    }
  ]
}
